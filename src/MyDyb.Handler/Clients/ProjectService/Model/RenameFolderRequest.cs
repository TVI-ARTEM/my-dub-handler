/*
 * MyDub.Projects
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MyDyb.Handler.Clients.ProjectService.Model
{
    /// <summary>
    /// RenameFolderRequest
    /// </summary>
    [DataContract(Name = "RenameFolderRequest")]
    public partial class RenameFolderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenameFolderRequest" /> class.
        /// </summary>
        [JsonConstructor]
        protected RenameFolderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RenameFolderRequest" /> class.
        /// </summary>
        /// <param name="folderId">folderId (required).</param>
        /// <param name="newName">newName (required).</param>
        public RenameFolderRequest(long folderId = default(long), string newName = default(string))
        {
            this.FolderId = folderId;
            // to ensure "newName" is required (not null)
            if (newName == null)
            {
                throw new ArgumentNullException("newName is a required property for RenameFolderRequest and cannot be null");
            }
            this.NewName = newName;
        }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name = "folderId", IsRequired = true, EmitDefaultValue = true)]
        public long FolderId { get; set; }

        /// <summary>
        /// Gets or Sets NewName
        /// </summary>
        [DataMember(Name = "newName", IsRequired = true, EmitDefaultValue = true)]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RenameFolderRequest {\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NewName (string) maxLength
            if (this.NewName != null && this.NewName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for NewName, length must be less than 100.", new [] { "NewName" });
            }

            // NewName (string) minLength
            if (this.NewName != null && this.NewName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for NewName, length must be greater than 1.", new [] { "NewName" });
            }

            yield break;
        }
    }

}
