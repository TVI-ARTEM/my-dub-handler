/*
 * AudioDub Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace MyDyb.Handler.Clients.MlService.Model
{
    /// <summary>
    /// GenerateAudioResponse
    /// </summary>
    [DataContract(Name = "GenerateAudioResponse")]
    public partial class GenerateAudioResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateAudioResponse" /> class.
        /// </summary>
        [JsonConstructor]
        protected GenerateAudioResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateAudioResponse" /> class.
        /// </summary>
        /// <param name="mediaId">mediaId (required).</param>
        public GenerateAudioResponse(string mediaId = default(string))
        {
            // to ensure "mediaId" is required (not null)
            if (mediaId == null)
            {
                throw new ArgumentNullException("mediaId is a required property for GenerateAudioResponse and cannot be null");
            }
            this.MediaId = mediaId;
        }

        /// <summary>
        /// Gets or Sets MediaId
        /// </summary>
        [DataMember(Name = "media_id", IsRequired = true, EmitDefaultValue = true)]
        public string MediaId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateAudioResponse {\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
